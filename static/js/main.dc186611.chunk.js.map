{"version":3,"sources":["List.js","App.js","serviceWorker.js","index.js"],"names":["StyledList","styled","_ref","className","name","height","weight","bmi","date","status","id","removeData","react_default","a","createElement","onClick","_templateObject","props","color","displayName","orange","gray","StyledApp","_useState","useState","_useState2","Object","slicedToArray","input","setInput","_useState3","_useState4","display","setDisplay","useEffect","JSON","parse","localStorage","getItem","setLocalStorage","dataSaveInLS","setItem","stringify","getResult","options","allData","Date","toLocaleDateString","newResult","uuid","v4","concat","toConsumableArray","filter","data","type","placeholder","value","onChange","e","objectSpread","target","trim","length","toFixed","alert","map","i","src_List","key","App_templateObject","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8xBAIA,IAmBMA,EAAaC,YAnBN,SAAAC,GAA0E,IAAxEC,EAAwED,EAAxEC,UAAWC,EAA6DF,EAA7DE,KAAMC,EAAuDH,EAAvDG,OAAQC,EAA+CJ,EAA/CI,OAAQC,EAAuCL,EAAvCK,IAAKC,EAAkCN,EAAlCM,KAAMC,EAA4BP,EAA5BO,OAAQC,EAAoBR,EAApBQ,GAAIC,EAAgBT,EAAhBS,WACrE,OACEC,EAAAC,EAAAC,cAAA,OAAKX,UAAWA,EAAWO,GAAIA,GAE/BE,EAAAC,EAAAC,cAAA,oBAAYV,GACZQ,EAAAC,EAAAC,cAAA,WAAMT,EAAN,IAAeC,GACfM,EAAAC,EAAAC,cAAA,mBAAWP,GACXK,EAAAC,EAAAC,cAAA,oBAAYN,GACZI,EAAAC,EAAAC,cAAA,WAAML,GACNG,EAAAC,EAAAC,cAAA,OAAKX,UAAU,SAASY,QAAS,kBAAIJ,EAAWD,KAAhD,YAUeT,CAAHe,IAGY,SAAAC,GAAK,OAAEA,EAAMC,QA2BzClB,EAAWmB,YAAc,OAEVnB,kzECjDf,IAAMoB,EAAS,UACTC,EAAO,UA2GPC,EAAYrB,YAzGN,SAAAC,GAAiB,IAAfC,EAAeD,EAAfC,UAAeoB,EACDC,mBAAS,CAACpB,KAAK,GAAIC,OAAO,GAAIC,OAAO,KADpCmB,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACpBK,EADoBH,EAAA,GACbI,EADaJ,EAAA,GAAAK,EAEGN,mBAAS,IAFZO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEpBE,EAFoBD,EAAA,GAEXE,EAFWF,EAAA,GAI3BG,oBAAU,WACRD,EAAWE,KAAKC,MAAMC,aAAaC,QAAQ,iBAAmB,KAC9D,IAEF,IAAMC,EAAkB,SAAAC,GACtBP,EAAWO,GACXH,aAAaI,QAAQ,cAAeN,KAAKO,UAAUF,KAa/CG,EAAY,SAACvC,EAAMC,EAAQC,EAAQC,GACzC,IAAIqC,EAAU,CACZ1B,MAAO,GACPT,OAAQ,IAgBR,OAbCF,EAAK,MACNqC,EAAQ1B,MAAO,QACf0B,EAAQnC,OAAQ,eACTF,GAAK,MAAQA,EAAI,IACxBqC,EAAQ1B,MAAQ,OAChB0B,EAAQnC,OAAQ,qBACTF,GAAK,IAAMA,EAAI,IACtBqC,EAAQ1B,MAAQ,SAChB0B,EAAQnC,OAAS,eAEjBmC,EAAQ1B,MAAQ,MAChB0B,EAAQnC,OAAS,SAEVoC,EAAQD,EAAQ1B,MAAOd,EAAMC,EAAQC,EAAQC,EAAKqC,EAAQnC,SAK7DoC,EAAS,SAAC3B,EAAOd,EAAMC,EAAQC,EAAQC,EAAKE,GAChD,IAAMD,GAAO,IAAIsC,MAAOC,qBAClBC,EAAY,CAACtC,GAAIuC,IAAKC,KAAMhC,QAAOd,OAAMC,SAAQC,SAAQC,MAAKC,OAAMC,UACpE+B,EAAY,GAAAW,OAAAzB,OAAA0B,EAAA,EAAA1B,CAAMM,GAAN,CAAegB,IACjCT,EAAgBC,IAGZ7B,EAAa,SAAAD,GACjB,IAAM8B,EAAeR,EAAQqB,OAAQ,SAAAC,GAAI,OAAGA,EAAK5C,KAAOA,IACxD6B,EAAgBC,IAGlB,OACE5B,EAAAC,EAAAC,cAAA,OAAKX,UAAWA,GAChBS,EAAAC,EAAAC,cAAA,cACAF,EAAAC,EAAAC,cAAA,OAAKX,UAAU,QAAf,OAEAS,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,SAAOyC,KAAK,OAAOC,YAAY,kBAAkBC,MAAO7B,EAAMxB,KAAMsD,SAAU,SAAAC,GAAC,OAAE9B,EAASH,OAAAkC,EAAA,EAAAlC,CAAA,GAAIE,EAAL,CAAYxB,KAAMuD,EAAEE,OAAOJ,YACpH7C,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,SAAOyC,KAAK,OAAOC,YAAY,oBAAoBC,MAAO7B,EAAMvB,OAAQqD,SAAU,SAAAC,GAAC,OAAE9B,EAASH,OAAAkC,EAAA,EAAAlC,CAAA,GAAIE,EAAL,CAAYvB,OAAQsD,EAAEE,OAAOJ,YAC1H7C,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,SAAOyC,KAAK,OAAOC,YAAY,oBAAoBC,MAAO7B,EAAMtB,OAAQoD,SAAU,SAAAC,GAAC,OAAE9B,EAASH,OAAAkC,EAAA,EAAAlC,CAAA,GAAIE,EAAL,CAAYtB,OAAQqD,EAAEE,OAAOJ,aAG1H7C,EAAAC,EAAAC,cAAA,OAAKX,UAAU,gBAAgBY,QA5DnB,WACb,GAAIa,EAAMvB,OAAO,KAAOuB,EAAMvB,OAAO,IAAMuB,EAAMtB,OAAO,KAAOsB,EAAMtB,OAAO,IAAMsB,EAAMxB,KAAK0D,OAAOC,OAAO,EAAG,CAC7GlC,EAASD,GACT,IAAMrB,GAAOqB,EAAMtB,OAAOsB,EAAMvB,OAAO,IAAIuB,EAAMvB,OAAO,KAAK2D,QAAQ,GACrErB,EAAUf,EAAMxB,KAAMwB,EAAMvB,OAAQuB,EAAMtB,OAAQC,QAGlD0D,MAAM,kEAqDN,oBAGArD,EAAAC,EAAAC,cAAA,OAAKX,UAAU,aAAf,cAIAS,EAAAC,EAAAC,cAAA,WACCkB,EAAQkC,IAAI,SAAAC,GAAC,OACdvD,EAAAC,EAAAC,cAACsD,EAAD,CACAC,IAAKF,EAAEzD,GACPA,GAAIyD,EAAEzD,GACNQ,MAAOiD,EAAEjD,MACTd,KAAM+D,EAAE/D,KACRC,OAAQ8D,EAAE9D,OACVC,OAAQ6D,EAAE7D,OACVC,IAAK4D,EAAE5D,IACPC,KAAM2D,EAAE3D,KACRC,OAAQ0D,EAAE1D,OACVE,WAAYA,OAIZC,EAAAC,EAAAC,cAAA,cAAQF,EAAAC,EAAAC,cAAA,OAAKX,UAAU,eAAf,UASMF,CAAHqE,IAcSjD,EAQXA,EACWD,EAIAA,EAoBAC,EAiBbD,EAQUA,EAeVC,EACWD,EACAA,EAaXC,EAUWD,EAQXC,EACWD,EAIAA,GAKtBE,EAAUH,YAAc,MAETG,QC1OKiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjE,EAAAC,EAAAC,cAACgE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.dc186611.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst List = ({className, name, height, weight, bmi, date, status, id, removeData}) => {\r\n  return (\r\n    <div className={className} id={id}>\r\n\r\n    <div>Name: {name}</div>\r\n    <div>{height}/{weight}</div> \r\n    <div>BMI: {bmi}</div> \r\n    <div>Date: {date}</div>\r\n    <div>{status}</div>\r\n    <div className='delete' onClick={()=>removeData(id)}>delete</div>\r\n \r\n    </div>\r\n  )\r\n}\r\n\r\nList.propTypes = {\r\n  className: PropTypes.string\r\n}\r\n\r\nconst StyledList = styled(List)`\r\n display: flex;\r\n margin: 30px auto;\r\n box-shadow:0 1px 2px 3px ${props=>props.color};\r\n font-size: 22px; \r\n color: #424242;\r\n\r\n @media (min-width: 769px){\r\n  flex-direction: row;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  width: 1200px;\r\n  height: 100px;\r\n }\r\n\r\n @media (max-width: 768px){\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 80vw;\r\n  height: 200px;\r\n  border-radius: 20px;\r\n }\r\n\r\n.delete{\r\n  color: #8B0000;\r\n  font-weight: 600;\r\n} \r\n} \r\n`\r\nStyledList.displayName = 'List'\r\n\r\nexport default StyledList","import React, {useState, useEffect} from 'react' \nimport styled from 'styled-components' \nimport PropTypes from 'prop-types'\nimport List from './List'\nimport uuid from 'uuid' \n\nconst orange = '#FFD366'\nconst gray = '#424242'\n\nconst App = ({className}) => {\n  const [input, setInput] = useState({name:'', height:'', weight:''})\n  const [display, setDisplay] = useState([])\n\n  useEffect(() => {\n    setDisplay(JSON.parse(localStorage.getItem(\"LS-BMI-data\")) || [])\n  },[]) \n   \n  const setLocalStorage = dataSaveInLS => {\n    setDisplay(dataSaveInLS)\n    localStorage.setItem(\"LS-BMI-data\", JSON.stringify(dataSaveInLS)) \n  } \n \n  const calcu = () => {\n   if( input.height<250 && input.height>90 && input.weight<300 && input.weight>10 && input.name.trim().length>0 ){\n    setInput(input)\n    const bmi = (input.weight/input.height*100/input.height*100).toFixed(2)\n    getResult(input.name, input.height, input.weight, bmi)  \n  }\n    else{\n    alert('please enter valid name and correct number for height/weight')};\n  }\n \n  const getResult = (name, height, weight, bmi) => {\n  let options = {\n    color: '', \n    status: ''  \n  };\n\n  if(bmi< 18.5) { \n    options.color= 'green';\n    options.status= 'Undervektig';    \n  }else if(bmi>=18.5 && bmi<25){  \n    options.color = 'blue';\n    options.status= 'Normal kroppsvekt';\n  }else if(bmi>=25 && bmi<30){  \n    options.color = 'orange'; \n    options.status = 'Overvektig';  \n  }else{ \n    options.color = 'red'; \n    options.status = 'Fedme';  \n  }   \n    return allData(options.color, name, height, weight, bmi, options.status) \n    \n    //alert(`name:${name} height:${height} weight:${weight} bmi:${bmi} date:${date} color: ${options.color} status: ${options.status}`)     \n  }\n\n  const allData =(color, name, height, weight, bmi, status) => {\n    const date = new Date().toLocaleDateString() \n    const newResult = {id: uuid.v4(), color, name, height, weight, bmi, date, status}\n    const dataSaveInLS= [...display, newResult]\n    setLocalStorage(dataSaveInLS)\n  }\n\n  const removeData = id => {  \n    const dataSaveInLS = display.filter( data=> data.id !== id)\n    setLocalStorage(dataSaveInLS)\n  }\n   \n  return (\n    <div className={className}>\n    <header>  \n    <div className='logo'>BMI</div>  \n\n    <div>\n    <p>Your name</p>  \n    <input type='text' placeholder='Enter your name' value={input.name} onChange={e=>setInput({...input, name: e.target.value})} />\n    <p>Your height / cm</p>  \n    <input type='text' placeholder='Enter your height' value={input.height} onChange={e=>setInput({...input, height: e.target.value})} />\n    <p>Your weight / kg</p>\n    <input type='text' placeholder='Enter your weight' value={input.weight} onChange={e=>setInput({...input, weight: e.target.value})} />\n    </div>\n\n    <div className='circle-result' onClick={calcu}>Get your result</div>\n    </header>\n\n    <div className='bmi-title'>\n     BMI result\n    </div>  \n\n    <div>\n    {display.map(i =>\n    <List \n    key={i.id}\n    id={i.id}\n    color={i.color}\n    name={i.name}\n    height={i.height}\n    weight={i.weight}\n    bmi={i.bmi}\n    date={i.date}\n    status={i.status} \n    removeData={removeData}\n    />)}\n    </div>  \n\n    <footer><div className='footer-logo'>BMI</div></footer>\n    </div>\n  )\n}\n\nApp.propTypes = {\n  className: PropTypes.string\n}\n \nconst StyledApp = styled(App)`\n background: #FFFACD;\t\n display: flex;\n flex-direction: column;\n font-family: cursive;\n\n@media (min-width: 769px){ \n  header{\n    display: flex;\n    justify-content: space-evenly;\n    align-items: center;\n    text-align: center;\n    width: 100vw;\n    height: 350px;\n    background-color: ${gray};\n  }  \n\n  .logo{\n    font-size: 48px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: ${gray};\n    background-color: ${orange};\n    width: 120px;\n    height: 120px;\n    border-radius: 20%;\n    border: 1px solid ${orange};\n    box-shadow:0 1px 2px 2px blue;\n  }\n\n  .circle-result{\n    width: 120px;\n    height: 120px;\n    border-radius: 50%;\n  }\n}\n\n@media (max-width: 768px){\n  header{\n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n    align-items: center;\n    text-align: center;\n    width: 100vw;\n    height: 500px;\n    background-color: ${gray};\n  }  \n\n  .logo{\n    display: none;\n  }\n\n  .circle-result{\n    width: 250px;\n    height: 50px;\n    border-radius: 20px;\n  }\n}\n\n\np{\n  font-size: 18px;\n  color: ${orange}; \n}\n\ninput {\n width: 250px;\n height: 40px;\n &[type=text]{\n  width:100%;\n  border:2px solid ${orange};\n  background:rgba(255,255,255,0.18);\n  color:#FFF;\n  outline:0;\n  font-size:24px;\n  padding:2px 12px;\n  border-radius:10px;\n }\n}\n\n.circle-result{  \n  font-size: 24px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: ${gray};\n  background-color: ${orange};\n  border: 1px solid ${orange};\n  &:hover, &:active{\n  box-shadow:0 1px 6px 3px rgba(255,196,50,0.64);\n  background:rgba(222,168,33,1);\n  }\n}  \n\n.bmi-title{\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100px;\n  font-size: 24px;\n  color: ${gray};\n}\n\nfooter{\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n  width: 100vw;\n  height: 90px;\n  background-color: ${orange};\n  margin-top: 50px;\n\n  .footer-logo{\n  font-size: 24px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: ${gray};\n  background-color: ${orange};\n  width: 55px;\n  height: 55px;\n  border-radius: 20%;\n  border: 1px solid ${orange};\n  box-shadow:0 1px 2px 2px #C71585;\n  }\n}\n`\nStyledApp.displayName = 'App'\n\nexport default StyledApp\n ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}